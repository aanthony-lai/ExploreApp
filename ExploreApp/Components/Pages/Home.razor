@rendermode InteractiveServer
@inject IGooglePlacesService googlePlaceService
@inject ICachingService<NearbySearchDTO> cachingService
@inject IMemoryCache cache
@page "/"

<Header></Header>
<section class="page animate__animated animate__slideInLeft">
	<div class="groups picked-for-you">
		<h1>Near you</h1>
		<div class="box-container">
			@foreach (var place in pickedForYou.places)
			{
				<div class="box">
					<div class="image-container">
						<img src="@(googlePlaceService.GetPlacePhoto(place.photos[0].name))"/> 
					</div>
					<div class="description">
						<h6>@(place.displayName.text.Length > 17 ? 
							place.displayName.text.Substring(0, 17) + "..." : 
							place.displayName.text)
						</h6>
						<p>@place.primaryTypeDisplayName.text</p>
					</div>
				</div>
			}
		</div>
	</div>
	<div class="groups picked-for-you">
		<h1>Hot right now</h1>
		<div class="box-container">
			@foreach (var place in hotRightNow.places)
			{
				<div class="box">
					<div class="image-container">
						<img src="@(googlePlaceService.GetPlacePhoto(place.photos[0].name))" />
					</div>
					<div class="description">
						<h6>@(place.displayName.text.Length > 17 ?
							place.displayName.text.Substring(0, 17) + "..." :
							place.displayName.text)
						</h6>
						<p>@place.primaryTypeDisplayName.text</p>
					</div>
				</div>
			}
		</div>
	</div>
</section>
<WhatsNow />

@code {
	NearbySearchDTO pickedForYou { get; set; } = new();
	NearbySearchDTO hotRightNow { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		const string pickedForYouKey = "pickedForYouData";
		const string hotRightNowKey = "hotRightNowData";

		if (!cache.TryGetValue(pickedForYouKey, out NearbySearchDTO? cachedPickedForYou))
		{
			pickedForYou = await googlePlaceService.NearbySearchAsync("restaurant");
			cachingService.CacheData(pickedForYou, pickedForYouKey);
		}
		else
		{
			pickedForYou = cachedPickedForYou!;
		}
		      
		if (!cache.TryGetValue(hotRightNowKey, out NearbySearchDTO? cachedHotRightNow))
		{
			hotRightNow = await googlePlaceService.NearbySearchAsync("bar");
			cachingService.CacheData(hotRightNow, hotRightNowKey);
		}
		else
		{
			hotRightNow = cachedHotRightNow!;
		}
	}
}